@page "/login"
@using EmployeeDirectory.UI.Data.ViewModels
@using EmployeeDirectory.UI.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using  Microsoft.AspNetCore.Authentication.Cookies;
@inject NavigationManager NavigationManager
@inject AppDbContext appDbContext

<div class="row">

    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@LModel" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div>
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">

                <label>User Name</label>
                <InputText @bind-Value="LModel.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="()=>LModel.UserName" />
            </div>
            <div class="mb-3">

                <label>Password</label>
                <InputText @bind-Value="LModel.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="()=>LModel.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>

            </div>
            <div class="mb-3 d-grid gap-2">

                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>

    </div>
</div>




@code {

    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }
     
    [SupplyParameterFromForm]
    public LoginViewModel LModel { get; set; }=
    new LoginViewModel();

    public string? errorMessage;
    private async Task Authenticate()
    {
        var userAccount = appDbContext.UserAccounts.Where(x => x.UserName == LModel.UserName).FirstOrDefault();
        if(userAccount is null || userAccount.Password != LModel.Password)
        {
            errorMessage = "Invalid User name or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,LModel.UserName),
            new Claim(ClaimTypes.Role,userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
}
